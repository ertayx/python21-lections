"Наследование - принцип ООП, где мы можем в дочернем классе уноследовать, преопределять и использовать все атрибуты и методы родительского класса"

class A:
    def method(self):
        print("method in class A")
obj_a = A()
obj_a.method()#'method in class A'

class B(A):
    """"наследовали все методы и аттрибуты у класса A"""

obj_b = B()
obj_b.method()#'method in class A'

"class A - родительский класс"
"class B - дочерний класс"

class C(A):
    """Наследовали все методы и аттрибуты у класса А и переопредилили метод method"""
    def method(self):
        print("method in class C")
obj_a = A()
obj_a.method()#'method in class A'

obj_c =C()
obj_c.method()#'method in class c'

"Переопределение - даем то же название, но другое значение"

"super() - эта функция которая позволяет обратиться родительскому классу и вызвать определенные методы или аттрибуты"

class A:
    def myrange(self, n):
        return list(range(0,n+1))
class B(A):
    def myrange(self):
        # через super мы обращяемся к методу родительского класса
        return super().myrange(10)




"===========================Виды наследования============================"
# одиночное наследование
# множественное наследование
# многоуровневое наследование
# иерархическое наследование 
# гибридное наследование